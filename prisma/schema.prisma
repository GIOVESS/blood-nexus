generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(cuid())
  name                   String
  email                  String?                @unique
  emailVerified          DateTime?
  phone                  String?                @unique
  phoneVerified          DateTime?
  password               String?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  tokens                 Token[]
  userRoles              UserRole[]
  bloodGroup             BloodGroup?
  gender                 Gender?
  dateOfBirth            DateTime?
  lastDonatedOn          DateTime?
  addressId              Int?
  address                Address?               @relation(fields: [addressId], references: [id], onDelete: Cascade)
  isActive               Boolean?               @default(true)
  isAvailableForDonation Boolean?               @default(false)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  requestedBloodDonations BloodDonationRequest[] @relation("Requester")
  donatedBloodDonations  BloodDonationRequest[] @relation("Donor")
  blogPosts              BlogPost[]
  requestedAsDonor      RequestedDonor[]
}

model Token {
  id        String    @id @default(cuid())
  userId    String
  token     String
  type      TokenType @default(OTP)
  createdAt DateTime  @default(now())
  expiresAt DateTime  @default(dbgenerated("NOW() + interval '15 minutes'"))

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  userRoles   UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, roleId])
}

enum TokenType {
  OTP
  RESET_PASSWORD
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
}

model Organization {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  logoUrl     String?
  faviconUrl  String?
  seo         Json?    @default("{}")
  theme       Json?    @default("{}")
  settings    Json?    @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Patient {
  id                    String                 @id @default(cuid())
  name                  String
  gender                Gender?
  age                   Int?
  bloodGroup            BloodGroup?
  disease               String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  bloodDonationRequests BloodDonationRequest[]
}

model Address {
  id            Int      @id @default(autoincrement())
  label         String
  type          AddressType @default(OTHER)
  county        String
  countyId      String?
  subCounty     String
  subCountyId   String?
  ward          String
  wardId        String?
  streetAddress String?
  postalCode    String?
  landmark      String?
  latitude      Float?
  longitude     Float?
  instructions  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  googlePlaceId      String?
  googlePlaceDetails Json?
  bloodDonationRequests BloodDonationRequest[]
  User          User[]

  @@index([county, subCounty, ward])
}

model BloodDonationRequest {
  id         String                       @id @default(cuid())
  requesterId  String?
  donorId     String?
  requiredOn  DateTime
  addressId   Int                          @unique
  address     Address                      @relation(fields: [addressId], references: [id], onDelete: Cascade)
  bloodGroup  BloodGroup
  unit        Int                          @default(1)
  patient     Patient?                     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId  String?
  phone      String?
  status     BloodDonationRequestStatus   @default(PENDING)
  notes      String?
  priority   BloodDonationRequestPriority @default(MEDIUM)
  createdAt  DateTime                     @default(now())
  updatedAt  DateTime                     @updatedAt

  requester  User? @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  donor      User? @relation("Donor", fields: [donorId], references: [id], onDelete: Cascade)
  requestedDonors RequestedDonor[]
}

enum BloodDonationRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  IGNORED
  COMPLETED
}

enum BloodDonationRequestPriority {
  LOW
  MEDIUM
  HIGH
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNDISCLOSED
}

enum AddressType {
  HOSPITAL
  BLOOD_BANK
  OTHER
}


model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      @db.Text
  excerpt     String?     @db.Text
  featuredImage String?
  published   Boolean     @default(false)
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories  BlogPostCategory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model BlogCategory {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String?
  posts       BlogPostCategory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model BlogPostCategory {
  postId      String
  categoryId  String
  post        BlogPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  category    BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model RequestedDonor {
  id                    String               @id @default(cuid())
  bloodDonationRequest  BloodDonationRequest @relation(fields: [bloodDonationRequestId], references: [id], onDelete: Cascade)
  bloodDonationRequestId String
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  requestedAt           DateTime             @default(now())
  status                RequestedDonorStatus @default(PENDING)

  @@unique([bloodDonationRequestId, userId])
}

enum RequestedDonorStatus {
  PENDING
  ACCEPTED
  REJECTED
  IGNORED
  COMPLETED
}
